name: Deploy to EC2

on:
  push:
    branches: [ main, develop ]  # main과 develop 브랜치 푸시 시 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "SPRING_PROFILE=prod" >> $GITHUB_ENV
            echo "APP_NAME=app-prod" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "SPRING_PROFILE=dev" >> $GITHUB_ENV
            echo "APP_NAME=app-dev" >> $GITHUB_ENV
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app
            
            echo '${{ secrets.APPLICATION }}' > application.yaml
            
            # Docker Hub 로그인
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # 기존 컨테이너 중지 및 삭제
            docker stop ${{ env.APP_NAME }} || true
            docker rm ${{ env.APP_NAME }} || true
            
            # 새 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }}
            
            # 새 컨테이너 실행
            docker run -d \
              --name ${{ env.APP_NAME }} \
              -p ${{ env.APP_NAME == 'app-prod' && '8080:8080' || '8081:8081' }} \
              -v /home/ec2-user/app/application.yaml:/app/application.yaml \
              ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }}
            
            # 미사용 이미지 정리
            docker image prune -af
