name: Deploy to EC2

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "SPRING_PROFILE=prod" >> $GITHUB_ENV
            echo "APP_NAME=app-prod" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "SPRING_PROFILE=dev" >> $GITHUB_ENV
            echo "APP_NAME=app-dev" >> $GITHUB_ENV
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # application.yaml 생성
      - name: Make application.yaml
        run: |
          mkdir -p ./src/main/resources
          echo '${{ secrets.APPLICATION }}' > ./src/main/resources/application.yaml

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }}

      - name: Deploy to Oracle
        uses: appleboy/ssh-action@master
        with:
         host: ${{ secrets.ORACLE_HOST }}
         username: ubuntu
         key: ${{ secrets.ORACLE_SSH_KEY }}
         script: |
           cd /home/ubuntu
           
           # Docker Hub 로그인
           echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
           
           # Docker 네트워크 생성 (이미 있으면 무시)
           docker network create app-network || true
           
           # MariaDB를 네트워크에 연결 (이미 연결되어 있으면 무시)
           docker network connect app-network mariadb-container || true
           
           # 기존 컨테이너 중지 및 삭제
           docker stop ${{ env.APP_NAME }} || true
           docker rm ${{ env.APP_NAME }} || true
           
           # 새 이미지 pull
           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }}
           
           # 새 컨테이너 실행 (같은 네트워크로)
           docker run -d \
             --name ${{ env.APP_NAME }} \
             --network app-network \
             -p ${{ env.APP_NAME == 'app-prod' && '8080:8080' || '8081:8080' }} \
             -e TZ=Asia/Seoul \
             ${{ secrets.DOCKERHUB_USERNAME }}/hiphadi:${{ github.sha }}
           
           # 미사용 이미지 정리
           docker image prune -af
